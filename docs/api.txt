Currently the server provides a few HTTP endpoints you can call to get basic information about the server.
This is very experimental so it could change at any time.

.----------------------------------------------------------
| Public information; no credentials required
'----------------------------------------------------------

----- /v1/town_info -----
Gets information about the server's current status.

Example response:
{
  "stats": {
    "user_count": 1,
    "bot_count": 0,
    "total_connections": 1,
    "time_online": 10
  },
  "users": {
    "~1": {
      "name": "Guest 1",
      "username": null,
      "id": "~1",
      "time_online": 3
    }
  },
  "maps": {
    "61": {
      "name": "Main map",
      "desc": "the test",
      "user_count": 1,
      "id": 61,
      "users": [
        "~1"
      ]
    }
  },
  "server": {
    "name": "Tilemap Town",
    "motd": "Welcome to the official [b]Tilemap Town[/b] testing server.",
    "default_map": 1
  }
}


----- /v1/server_version -----
Gets information about the software running on the server.

Example response:
{
  "name": "Tilemap Town server",
  "version": "0.2.0",
  "code": "https://github.com/NovaSquirrel/TilemapTown",
  "features": {
    "see_past_map_edge": {
      "version": "0.0.1",
      "minimum_version": "0.0.1"
    },
    "batch": {
      "version": "0.0.1",
      "minimum_version": "0.0.1"
    },
    "receive_build_messages": {
      "version": "0.0.1",
      "minimum_version": "0.0.1"
    },
    "entity_message_forwarding": {
      "version": "0.0.1",
      "minimum_version": "0.0.1"
    }
  }
}


----- /v1/server_resources -----
Sends information about all of the built-in tile types the server provides, as well as all of the sprite sheets those tiles use.
Same information sent in "RSC" protocol messages.


----- /v1/map/MAP_ID?info=1&data=1 -----
Retrieves information about a public map.
If info is nonzero, an "info" field is added (formatted as in "MAI" protocol messages.) Defaults to 1 if not provided.
If data is nonzero, a "data" field is added (formatted as in "MAP" protocol messages.) Defaults to 0 if not provided.
Data currently won't be added to the response if it's not loaded by the server (which can happen if no user is on the map).

Example response:
{
  "info": {
    "name": "Main map",
    "desc": "the test",
    "id": 61,
    "owner_id": 1,
    "owner_username": "novasquirrel",
    "default": "grass",
    "size": [100, 100],
    "public": true,
    "private": false,
    "build_enabled": true,
    "full_sandbox": true,
    "edge_links": null
  }
}


----- /v1/tsd/TILESET_ID -----
Requests a tileset definition from the server. See "TSD" in the protocol document.

Example response:
{
	"id": 1,
	"data": "[id, info, id, info, id, info, ...]"
}

Received data may be in string format (as in the above example), which would require parsing into JSON.


----- /v1/img/IMAGE_ID -----
Requests an image entity's URL from the server. See "IMG" in the protocol document.

Example response:
{
	"id": 1,
	"url": "http://example.com"
}


.----------------------------------------------------------
| File management; account required
'----------------------------------------------------------
Clients will receive a parameter named "api_key" in their IDN response.
Supply this header to the API with an "Authorization" header, in the form:
	Authorization: Bearer insert_api_key_here


----- GET /v1/my_files -----
Get a list of all files and folders this account currently has stored on the server.

Response:
	{
		"files": {
			"id": {
				"name": User-provided name,
				"desc": User-provided description,
				"folder": Folder ID or null,
				"created_at": UTC timestamp for when the file was created,
				"updated_at": UTC timestamp for when the file was last modified,
				"size": File size in bytes,
				"url": Full url you can access to retrieve this file
			}, ...
		},
		"folders": {
			"id": {
				"name": User-provided name,
				"desc": User-provided description,
				"folder": Folder ID or null
			}
		},
		"info": {
			"used_space": Space used in bytes,
			"free_space": Space left in bytes
		}
	}

Response codes:
	200 OK
	401 API key not valid
	403 Account doesn't have file upload permissions


----- GET /v1/my_files/file/FILE_ID
Gets the information for a specific file the user has stored

Response:
	{
		"id": ID for the file,
		"name": User-provided name,
		"desc": User-provided description,
		"folder": User-provided folder name; can be anything, used to group files together,
		"created_at": UTC timestamp for when the file was created,
		"updated_at": UTC timestamp for when the file was last modified,
		"size": File size in bytes,
		"url": Full URL you can access to retrieve this file
	}

Response codes:
	200 OK
	401 API key not valid
	403 Account doesn't have file upload permissions
	404 File doesn't exist


----- POST /v1/my_files/file -----
Upload a new file to your storage space.

Submit a form with the following fields (all optional except "file"):
	name: Any text for the file's name
	desc: Any text to describe the file in a wordier way than the name
	folder: A folder ID
	file: Binary data for the file

Response:
	{
		"file": {
			"id": ID for the file,
			"name": Name that was provided,
			"desc": Description that was provided,
			"folder": Folder that was provided,
			"size": Size of the uploaded file in bytes,
			"url": Full URL you can access to retrieve this file,
		},
		"info": {
			"used_space": Space used in bytes after this upload,
			"free_space": Space left in bytes after this upload
		}
	}

Response codes:
	200 OK
	400 Request format is bad
	401 API key not valid
	403 Account doesn't have file upload permissions
	413 File you're attempting to upload is too big
	507 Uploading this file would put you over the upload limit, whether your own or the global one


----- PUT /v1/my_files/file/FILE_ID
Replace some or all of the information on a file.

Submit a form with the following fields (all optional):
	name: Any text for the file's name
	desc: Any text to describe the file in a wordier way than the name
	folder: A folder ID
	file: Binary data for the file
	keep_url: Defaults to false, but if it's true then changing the file will not issue a new URL

Fields that are omitted will be left as-is.

Response:
	{
		"file": {
			"id": ID for the file,
			"url": Full URL you can access to retrieve this file,
			"name": Name that was provided,
			"desc": Description that was provided,
			"folder": Folder that was provided
		},
		"info": {
			"used_space": Space used in bytes after this upload,
			"free_space": Space left in bytes after this upload
		}
	}

Response codes:
	200 OK
	400 Request format is bad
	401 API key not valid
	403 Account doesn't have file upload permissions
	404 File doesn't exist
	413 File you're attempting to upload is too big
	507 Uploading this file would put you over the upload limit, whether your own or the global one


----- DELETE /v1/my_files/file/FILE_ID
Delete one of your files.

Response codes:
	200 OK
	401 API key not valid
	403 Account doesn't have file upload permissions
	404 File doesn't exist


----- GET /v1/my_files/folder/FOLDER_ID
Gets the information for a specific file the user has stored

Response:
	{
		"id": ID for the folder
		"name": User-provided name,
		"desc": User-provided description,
		"folder": Folder ID that this folder is inside, or null
	}

Response codes:
	200 OK
	401 API key not valid
	403 Account doesn't have file upload permissions
	404 File doesn't exist


----- POST /v1/my_files/folder -----
Creates a new folder in your storage space.

Submit a form with the following fields (all optional):
	name: Any text for the folder's name
	desc: Any text to describe the folder in a wordier way than the name
	folder: A folder name, for grouping related files together

Response:
	{
		"id": ID for the folder
		"name": User-provided name,
		"desc": User-provided description,
		"folder": Folder ID that this folder is inside, or null
	}

Response codes:
	200 OK
	400 Request format is bad
	401 API key not valid
	403 Account doesn't have file upload permissions


----- PUT /v1/my_files/folder/FOLDER_ID
Replace some or all of the information on a folder.

Submit a form with the following fields (all optional):
	name: Any text for the folder's name
	desc: Any text to describe the folder in a wordier way than the name
	folder: Folder to move this folder to

Fields that are omitted will be left as-is.

Response:
	{
		"id": ID for the folder
		"name": User-provided name,
		"desc": User-provided description,
		"folder": Folder ID that this folder is inside, or null
	}

Response codes:
	200 OK
	400 Request format is bad
	401 API key not valid
	403 Account doesn't have file upload permissions
	404 Folder doesn't exist


----- DELETE /v1/my_files/folder/FOLDER_ID
Delete one of your folders, moving everything that was in the folder to the folder's parent.

Response codes:
	200 OK
	401 API key not valid
	403 Account doesn't have file upload permissions
	404 Folder doesn't exist

