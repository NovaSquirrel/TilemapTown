https://www.sqlite.org/datatype3.html

---META---
item            - text    - what piece of meta information
value           - text    - the value

current items:
version         - version of the database format, "2" currently


---ENTITY--- (generic entity that can exist on a map, which can contain more information in other tables)
General:
	id              * integer - entity ID
	owner_id        - integer - owner user ID
	creator_id      - integer - creator user ID
	created_at      -timestamp- time the entity was created 
	acquired_at     -timestamp- time the owner was changed
	type            - integer - type, also may suggest a table to look in
		0 none
		1 user       (USER table)
		2 map        (MAP table)
		3 group      (GROUP_MEMBER table)
		4 text       (stores text, possibly a script. like notecards)
		5 image      (links to a .png)
		6 map_tile   (template for a tile that can be placed on a map)
		7 tileset    (stores a description of the tiles in a tileset)
		8 reference  (refer to another entity)
		9 folder     (for categorization; holds any number of other assets)
		10 landmark  (holds a location and provides the ability to quickly teleport to it)
		11 generic   (generic entity, used for things like props or puppets)
		12 chatroom  (entity specifically made to be a chat)

	name            - text    - name (for display and disambiguation purposes, not to persistently identify a specific entity)
	desc            - text    - description of the entity
	pic             - text    - JSON describing the appearance - usually [tileset, x, y] or [url, 0, 0]. If null, a default is used.

	flags           - integer - generic flags field
		0x0001 don't load this entity when the container loads (unimplemented)
		0x0002 this entity is public, and can be searched for (unimplemented)

	tags            - text    - metadata tags in JSON format, like species, pronouns, etc.

	data            - text    - data associated with the object, or NULL if not applicable.
								takes advantage of SQLite being able to store text in an integer column
								----
								text: the text being stored
							   image: path to the image, added to the server's base asset url?
							  object: JSON object repesenting object information?
							 tileset: JSON array alternating between tile id and compacted tile data
						   reference: asset number it's a reference to
							  folder: ?
							landmark: map ID, x, y
	compressed_data - blob    - data that has been compressed, where the original "data" field now specifies what compression algorithm is used.
							Currently the only compression algorithm available is "zlib"

Position:
	location        - integer - entity ID of whatever contains this entity - may be a map
	position        - text    - JSON position within the container. Usually [x,y] or [x,y,dir] but it's flexible

Home position:
	home_location   - integer - entity ID of whatever is this entity's home location
	home_position   - text    - JSON position within the container. Usually [x,y] or [x,y,dir] but it's flexible

Permissions:
	allow           - integer - default permissions to allow
	deny            - integer - default permissions to deny
	guest_deny      - integer - default permissions to deny for guests

	Values:
		0x00000001 entry (deny to ban a user)
		0x00000002 build (or "modify" for things other than maps)
		0x00000004 full sandbox (anyone can delete anything)
		0x00000008 map admin (can do things that otherwise only map owners can, like kick or ban, but not things that are truly owner only)
		0x00000010 make copies of this entity
		0x00000020 map bot (can operate on map remotely)
		0x00000040 move this entity within the container
		0x00000080 move this entity onto another map
		0x00000100 for maps: bulk build (can use the BLK command)
		       for groups: anyone can get a list of the members
		0x00000200 allowed to bring non-player entities here temporarily
		0x00000400 allowed to bring non-player entities here that can be here without the player's owner
		0x00000800 allowed to modify properties on this entity
		0x00001000 allowed to make this entity do arbitrary commands
		0x00002000 allowed to change visual properties, like picture or description 
		0x00004000 allowed to look at the contents of the entity
		0x00008000 user can set the owner of any of their entities to this entity
		0x00010000 allowed to set a topic on this map
		0x00020000 user is allowed to send chat to this entity, and listen to chat in this entity


---PERMISSION---
subject_id      * integer - ENTITY that the permissions apply to
actor_id        * integer - ENTITY that is allowed, or not allowed, to do these things to the entity specified in "subject_id"
allow           - integer - bit field for what extra permissions to allow
deny            - integer - bit field for what extra permissions to deny


---MAP---
entity_id       - integer - MAP_ENTITY id corresponding to this map
flags           - integer - generic flags field
							  - 1: (public) map shows up in searches
start_x         - integer - player starting X
start_y         - integer - player starting Y
width           - integer - map width
height          - integer - map height
default_turf    - text    - default map tile


---MAP_LOG--- (unimplemented, but tables are made for it)
id              * integer - log item ID
time            - timestamp - action time
map_id          - integer - map ID
user_id         - integer - user ID
action          - text    - action taken
info            - text    - additional information?


---USER--- (a user account)
entity_id       * integer - ENTITY id corresponding to this user
last_seen_at    -timestamp- last seen date

username        - text    - username
passhash        - text    - password hash (may be "hash" or "salt:hash")
passalgo        - text    - password algorithm name

watch           - text    - JSON array of users to watch for
ignore          - text    - JSON array of users to ignore messages from
client_settings - text    - whatever the client wants to store (like settings)

flags           - integer - user-specific flags
	0x0001 is a bot
	0x0002 larger file upload limits
	0x0004 don't produce build logs when this user builds
	0x0008 don't show this user's location in the API or /whereare
	0x0010 don't show this user at all in the API
	0x0020 don't allow adding this user to your watch list
	0x0040 don't include this user's pic and desc when their information is viewed remotely (as in a BAG info message)

---MAIL---
id              * integer - mail id
owner_id        - integer - ID of the user whose account the mail is sitting in
sender_id       - integer - ID of the user who sent the mail (sender ID)
recipients      - text    - comma separated list of all recipients' user IDs, including the one for this copy of the mail
flags           - integer - flags (bit 0 = read)
created_at      -timestamp- time the mail was sent
subject         - text    - subject line of the mail
contents        - text    - mail text


---SERVER_BAN---
id              * integer - ban ID
ip              - text    - IP that was banned
ip1             - text    - first part of IP address
ip2             - text    - second part of IP address
ip3             - text    - third part of IP address
ip4             - text    - fourth part of IP address
account         - id      - account that was also banned (unused)
admin_id        - id      - id of the admin doing the banning
created_at      -timestamp- time the ban was applied
expires_at      -timestamp- when ban expires
reason          - text    - ban reason


---GROUP_MEMBER---
group_id        * integer - ENTITY id for the group
member_id       * integer - entity ID of the player that's in the group
created_at      -timestamp- when the invite was made, so that it can be deleted if it's been too long
accepted_at     -timestamp- when the invite was accepted; null if it hasn't been accepted
flags           - integer - bitfield of group permissions
                            1:  can invite members
                            2:  can remove members


---GLOBAL_ENTITY_KEY--- (gives an entity a name that it can be referred to from anywhere)
entity_id       * integer - ENTITY id that's being referred to here
key             - text    - Name to refer to this entry with
flags           - integer - Not used yet


---USER_FILE_UPLOAD---
file_id         * integer - ID for the file
user_id         * integer - user who owns this file
created_at      -timestamp- when the file was created
updated_at      -timestamp- when the file was updated
name            - text    - user-given name for the file
desc            - text    - user-given description for the file
location        - integer - user folder this file is stored in, or null
size            - integer - size in bytes of the uploaded file
filename        - text    - filename within the filesystem
flags           - integer - currently not used


---USER_FILE_FOLDER---
folder_id       * integer - ID for the folder
user_id         * integer - user who owns this file
name            - text    - user-given name for the file
desc            - text    - user-given description for the file
location        - integer - folder this folder is stored in, or null
flags           - integer - currently not used
